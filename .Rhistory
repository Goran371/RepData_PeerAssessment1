a <- available.packages()
head(rownames(a),3)
find.packages("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
install.packages("swirl")
library(swirl)
ls()
rm(list=ls())
ls()
swirl()
5+7
x<- 5+7
x
y<- x-3
y
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
bye()
q()
swirl()
library(swirl)
swirl()
mySqrt <- (z-1)^0.5
mySqrt <- (z-1)^0.5
(Z-1)^0.5
(z-1)^0.5
info()
play()
(z-1)^0.5
nxt()
mySqrt <- (z-1)^0.5
mySqrt <- ((z-1)^0.5)
mysqrt <- (z-1)^0.5
mySqrt <- (z-1)^0.5
mySqrt <- (z-1)^0.5
mySqrt <- (z-1)^0.5
mySqrt <- (z-1)^0.5
mySqrt <- (z-1)^0.5
help()
mySqrt <- (z-1)^2
mySqrt <- (z-1)^0.5
play()
mySqrt <- (z-1)^0.5
mysqrt
mySqrt
nxt()
mySqrt <- (z-1)^0.5
mySqrt<- (z-1)^0.5
mySqrt<-(z-1)^0.5
skip()
mySqrt
myDiv<-z/mySqrt
myDiv
c(1,2,3,4)+c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
swirl()
1:20
pi:10
15:1
nxt()
nxt()
skip()
seq(1,20)
seq(0,10, by=.5)
seq(5,10,length=30)
myseq<- seq(5,10,length=30)
my_seq<- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_sec)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
bye
bye()
q()
x<-4
x
class(x)
x<-c(4,TRUE)
x
x<-c(1,3,5)
y<-c(3,2,10)
cbind(x,y)
rbind(x,y)
q()
mA <-matrix(1:4,2,2)
mA
?rbin
?rnorm
(rnorm)
set.seed(1)
rpois(5,2)
getwd()
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
install.packages("kernlab")
library(kernlab)
?data
data(spam)
str(spam)
?spam
set.seed(3435)
trainIndicator <- rbinom(4601,size=1, prob=0.5)
?table
table(trainIndicator)
trainSpam <-spm[trainIndicator==1,]
trainSpam <-spam[trainIndicator==1,]
testSpam <-spam[trainIndicator==0,]
names(trainSpam)
summary(trainSpam)
plot(log10(trainSpam$capitalAve+1)~trainSpam$type)
library(kernlab)
data(spam)
str(spam[, 1:5])
set.seed(3435)
trainIndicator = rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
trainSpam = spam[trainIndicator == 1, ]
testSpam = spam[trainIndicator == 0, ]
names(trainSpam)
head(trainSpam)
table(trainSpam$type)
summary(trainSpam)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(log10(trainSpam[, 1:4] + 1))
hCluster = hclust(dist(t(trainSpam[, 1:57])))
plot(hCluster)
hClusterUpdated = hclust(dist(t(log10(trainSpam[, 1:55] + 1))))
plot(hClusterUpdated)
trainSpam$numType = as.numeric(trainSpam$type) - 1
costFunction = function(x, y) sum(x != (y > 0.5))
cvError = rep(NA, 55)
library(boot)
for (i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
names(trainSpam)[which.min(cvError)]
## Use the best model from the group
predictionModel = glm(numType ~ charDollar, family = "binomial", data = trainSpam)
## Get predictions on the test set
predictionTest = predict(predictionModel, testSpam)
predictedSpam = rep("nonspam", dim(testSpam)[1])
## Classify as `spam' for those with prob > 0.5
predictedSpam[predictionModel$fitted > 0.5] = "spam"
## Classification table
table(predictedSpam, testSpam$type)
## Error rate
(61 + 458)/(1346 + 458 + 61 + 449)
setwd("~/GitHub/RepData_PeerAssessment1")
n
unzip("./activity.zip")
actData <- read.csv("activity.csv")
totStepDay <- with(actData, tapply(steps, date, sum, na.rm=T))
hist(totStepDay, breaks=20, xlab="Total steps per day", main="Total Steps per Day")
## calculate mean and median number of steps taken per day
meanStepDay <- mean(totStepDay)
medianStepDay <- median(totStepDay)
print(paste("Mean number of steps per day is",round(meanStepDay)))
sprintf("Median number of steps per day is %s", medianStepDay)
meanStep5min <- with(actData, tapply(steps, interval, mean, na.rm=T))
plot(meanStep5min, type="l",xlab="5 minute interval index", ylab="average number of steps taken")
##find the interval with highest average number of step
maxMeanSteps <- max(meanStep5min)
maxInterval <- match(meanStep5min, maxMeanSteps)
for (i in 1:length(maxInterval)) {
if (!is.na(maxInterval[i])) max_i=i
}
interval_id <- names(meanStep5min[max_i])
print(paste("Interval", interval_id, "has the highest mean number of steps (",round(maxMeanSteps,2),")"))
numberNA <- sum(is.na(actData[,1]))
print(paste("There are", numberNA, "missing values, which is equal to",round(100*numberNA/length(actData[,1]),2),"% of all observations"))
## my strategy for imputing values is to use the mean for the particular 5 minute interval
numberOfDays <- as.integer(as.Date(as.character(actData[length(actData[,1]), 2]))-
as.Date(as.character(actData[1,2])) +1)
numberOfIntervals <- length(actData[,1])/numberOfDays
actDataImp <- actData
actDataImp <-cbind(actDataImp, dayInt=c(rep(1:numberOfIntervals, numberOfDays)))
for (i in 1:length(actDataImp[,1])){
if (is.na(actDataImp[i,1])) {
actDataImp[i,1] <- round(meanStep5min[actDataImp[i,4]])
}
}
totStepDayImp <- with(actDataImp, tapply(steps, date, sum, na.rm=T))
hist(totStepDay, breaks=20, xlab="Total steps per day", main="Total Steps per Day")
## calculate mean and median number of steps taken per day
meanStepDayImp <- mean(totStepDayImp)
medianStepDayImp <- median(totStepDayImp)
print(paste("Mean number of steps per day with NAs replaced is",round(meanStepDayImp)))
sprintf("Median number of steps per day with NAs replaced is %s", medianStepDayImp)
actDataImp$weekday <- with(actDataImp, as.factor(weekdays(as.Date(as.character(date)))))
wdss <- subset(actDataImp, weekday=="Monday" | weekday=="Tuesday" |weekday=="Wednesday" |weekday=="Thursday" | weekday=="Friday" )
wess <- subset(actDataImp, weekday=="Saturday" | weekday=="Sunday" )
meanStep5minWeekday <- with(wdss, tapply(steps, interval, mean, na.rm=T))
meanStep5minWeekend <- with(wess, tapply(steps, interval, mean, na.rm=T))
par(mfrow=c(2,1), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(meanStep5minWeekend, type="l", col="blue", xaxt="n", xlab="", ylab="average number of steps", main="weekend")
title(main="Average number of steps  split on weekend and weekdays", outer=TRUE)
plot(meanStep5minWeekday, type="l", col= "blue", xlab="5 minute interval index", ylab="average number of steps", main="weekdays")
library (ggplot2)
head(wess)
head(wdss)
str(wess)
merge(wess,wdss, by=date)
merge(wess,wdss, by="date")
mrg <-merge(wess,wdss, by="date")
head(actImpData)
head(actDataImp)
str(actDataImp)
actDataImp$dayCat <- with(actDataImp, if (weekday=="Monday" | weekday=="Tuesday" |weekday=="Wednesday" |weekday=="Thursday" | weekday=="Friday") dayCat <- "weekday")
View(actDataImp)
actDataImp[1500,]
actDataImp$dayCat <- with(actDataImp, if ((weekday=="Monday") | (weekday=="Tuesday") | (weekday=="Wednesday") | (weekday=="Thursday") | (weekday=="Friday")) dayCat <- "weekday" else dayCat <- "weekend")
actDataImp[1500,]
library (ggplot2)
for (i in 1:length(actDatImp)){
if (actDataImp$weekday=="Saturday" | actDataImp$weekday=="Sunday") {
actDataImp$dayCat <- "Weekend"
} else {
actDataImp$dayCat <- "Weekday"
}
}
for (i in 1:length(actDataImp)){
if (actDataImp$weekday=="Saturday" | actDataImp$weekday=="Sunday") {
actDataImp$dayCat <- "Weekend"
} else {
actDataImp$dayCat <- "Weekday"
}
}
actDataImp[1500,]
actDataImp[1000,]
actDataImp[1700,]
actDataImp[1800,]
actDataImp$weekday=="Saturday"
actDataImp$weekday[1]=="Saturday"
actDataImp$weekday[1000]=="Saturday"
actDataImp$weekday[1500]=="Saturday"
for (i in 1:length(actDataImp)){
if (actDataImp$weekday[i]=="Saturday" | actDataImp$weekday[i]=="Sunday") {
actDataImp$dayCat[i] <- "Weekend"
} else {
actDataImp$dayCat[i] <- "Weekday"
}
}
actDataImp[1800,]
actDataImp[1500,]
actDataImp$weekday[1500]=="Saturday"
actDataImp$weekday[i]=="Saturday" | actDataImp$weekday[i]=="Sunday"
actDataImp$weekday[1500]=="Saturday" | actDataImp$weekday[1500]=="Sunday"
debug(for (i in 1:length(actDataImp)){
if (actDataImp$weekday[i]=="Saturday" | actDataImp$weekday[i]=="Sunday") {
actDataImp$dayCat[i] <- "Weekend"
} else {
actDataImp$dayCat[i] <- "Weekday"
}
})
debug(,(for (i in 1:length(actDataImp)){
if (actDataImp$weekday[i]=="Saturday" | actDataImp$weekday[i]=="Sunday") {
actDataImp$dayCat[i] <- "Weekend"
} else {
actDataImp$dayCat[i] <- "Weekday"
}
}),)
for (i in 1:length(actDataImp)){
if (actDataImp$weekday[i]=="Saturday" | actDataImp$weekday[i]=="Sunday") {
actDataImp$dayCat[i] <- "Weekend"
printf(i)
} else {
actDataImp$dayCat[i] <- "Weekday"
}
}
unzip("./activity.zip")
actData <- read.csv("activity.csv")
totStepDay <- with(actData, tapply(steps, date, sum, na.rm=T))
hist(totStepDay, breaks=20, xlab="Total steps per day", main="Total Steps per Day")
## calculate mean and median number of steps taken per day
meanStepDay <- mean(totStepDay)
medianStepDay <- median(totStepDay)
print(paste("Mean number of steps per day is",round(meanStepDay)))
sprintf("Median number of steps per day is %s", medianStepDay)
meanStep5min <- with(actData, tapply(steps, interval, mean, na.rm=T))
plot(meanStep5min, type="l",xlab="5 minute interval index", ylab="average number of steps taken")
##find the interval with highest average number of step
maxMeanSteps <- max(meanStep5min)
maxInterval <- match(meanStep5min, maxMeanSteps)
for (i in 1:length(maxInterval)) {
if (!is.na(maxInterval[i])) max_i=i
}
interval_id <- names(meanStep5min[max_i])
print(paste("Interval", interval_id, "has the highest mean number of steps (",round(maxMeanSteps,2),")"))
numberNA <- sum(is.na(actData[,1]))
print(paste("There are", numberNA, "missing values, which is equal to",round(100*numberNA/length(actData[,1]),2),"% of all observations"))
## my strategy for imputing values is to use the mean for the particular 5 minute interval
numberOfDays <- as.integer(as.Date(as.character(actData[length(actData[,1]), 2]))-
as.Date(as.character(actData[1,2])) +1)
numberOfIntervals <- length(actData[,1])/numberOfDays
actDataImp <- actData
actDataImp <-cbind(actDataImp, dayInt=c(rep(1:numberOfIntervals, numberOfDays)))
for (i in 1:length(actDataImp[,1])){
if (is.na(actDataImp[i,1])) {
actDataImp[i,1] <- round(meanStep5min[actDataImp[i,4]])
}
}
totStepDayImp <- with(actDataImp, tapply(steps, date, sum, na.rm=T))
hist(totStepDay, breaks=20, xlab="Total steps per day", main="Total Steps per Day")
## calculate mean and median number of steps taken per day
meanStepDayImp <- mean(totStepDayImp)
medianStepDayImp <- median(totStepDayImp)
print(paste("Mean number of steps per day with NAs replaced is",round(meanStepDayImp)))
sprintf("Median number of steps per day with NAs replaced is %s", medianStepDayImp)
actDataImp$weekday <- with(actDataImp, as.factor(weekdays(as.Date(as.character(date)))))
wdss <- subset(actDataImp, weekday=="Monday" | weekday=="Tuesday" |weekday=="Wednesday" |weekday=="Thursday" | weekday=="Friday" )
wess <- subset(actDataImp, weekday=="Saturday" | weekday=="Sunday" )
meanStep5minWeekday <- with(wdss, tapply(steps, interval, mean, na.rm=T))
meanStep5minWeekend <- with(wess, tapply(steps, interval, mean, na.rm=T))
par(mfrow=c(2,1), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(meanStep5minWeekend, type="l", col="blue", xaxt="n", xlab="", ylab="average number of steps", main="weekend")
title(main="Average number of steps  split on weekend and weekdays", outer=TRUE)
plot(meanStep5minWeekday, type="l", col= "blue", xlab="5 minute interval index", ylab="average number of steps", main="weekdays")
library (ggplot2)
View(actDataImp)
for (i in 1:length(actDataImp)){
if (actDataImp$weekday[i]=="Saturday" | actDataImp$weekday[i]=="Sunday") {
actDataImp$dayCat[i] <- "Weekend"
printf(i)
} else {
actDataImp$dayCat[i] <- "Weekday"
}
}
View(actDataImp)
actDataImp[1500,]
actDataImp[1800,]
?rep
actDataImp <- data.frame(weekday= c(("Monday","Tuesday","Wednesday","Thursday","Friday", "Saturday","Sunday")), rep(20)
actDataImpT <- data.frame(weekday= c(rep("Monday","Tuesday","Wednesday","Thursday","Friday", "Saturday","Sunday"),20))
actDataImpT <- data.frame(weekday= c(rep("Monday","Tuesday","Wednesday","Thursday","Friday", "Saturday","Sunday"),20))
actDataImpT <- data.frame(weekday= c(rep(("Monday","Tuesday","Wednesday","Thursday","Friday", "Saturday","Sunday")),20))
?rep
actDataImpT <- data.frame(weekday= rep(c("Monday","Tuesday","Wednesday","Thursday","Friday", "Saturday","Sunday"),20))
View(actDataImpT)
source('~/GitHub/RepData_PeerAssessment1/misc.R')
actDataImpT$dayCat[i] <- "Weekend"
actDataImpT[i]
actDataImpT$weekday[i]
str(actDataImpT)
View(actDataImpT)
debugSource('~/GitHub/RepData_PeerAssessment1/misc.R')
source('~/GitHub/RepData_PeerAssessment1/misc.R')
actDataImpT <- data.frame(weekday= rep(c("Monday","Tuesday","Wednesday","Thursday","Friday", "Saturday","Sunday"),20))
n
actDataImpT <- data.frame(weekday= rep(c("Monday","Tuesday","Wednesday","Thursday","Friday", "Saturday","Sunday"),20))
for (i in 1:length(actDataImpT)){
if (actDataImpT$weekday[i]=="Saturday" | actDataImpT$weekday[i]=="Sunday") {
actDataImpT$dayCat[i] <- "Weekend"
printf(i)
} else {
actDataImpT$dayCat[i] <- "Weekday"
}
}
source('~/GitHub/RepData_PeerAssessment1/misc.R')
source('~/GitHub/RepData_PeerAssessment1/misc.R')
misc()
actDataImpT$weekday[i]
View(actDataImpT)
debugSource('~/GitHub/RepData_PeerAssessment1/misc.R')
misc()
length(actDataImpT)
debugSource('~/GitHub/RepData_PeerAssessment1/misc.R')
misc()
debugSource('~/GitHub/RepData_PeerAssessment1/misc.R')
source('~/GitHub/RepData_PeerAssessment1/misc.R')
source('~/GitHub/RepData_PeerAssessment1/misc.R')
misc()
View(actDataImpT)
unzip("./activity.zip")
actData <- read.csv("activity.csv")
totStepDay <- with(actData, tapply(steps, date, sum, na.rm=T))
hist(totStepDay, breaks=20, xlab="Total steps per day", main="Total Steps per Day")
## calculate mean and median number of steps taken per day
meanStepDay <- mean(totStepDay)
medianStepDay <- median(totStepDay)
print(paste("Mean number of steps per day is",round(meanStepDay)))
sprintf("Median number of steps per day is %s", medianStepDay)
meanStep5min <- with(actData, tapply(steps, interval, mean, na.rm=T))
plot(meanStep5min, type="l",xlab="5 minute interval index", ylab="average number of steps taken")
##find the interval with highest average number of step
maxMeanSteps <- max(meanStep5min)
maxInterval <- match(meanStep5min, maxMeanSteps)
for (i in 1:length(maxInterval)) {
if (!is.na(maxInterval[i])) max_i=i
}
stop<- 0
unzip("./activity.zip")
actData <- read.csv("activity.csv")
totStepDay <- with(actData, tapply(steps, date, sum, na.rm=T))
hist(totStepDay, breaks=20, xlab="Total steps per day", main="Total Steps per Day")
## calculate mean and median number of steps taken per day
meanStepDay <- mean(totStepDay)
medianStepDay <- median(totStepDay)
print(paste("Mean number of steps per day is",round(meanStepDay)))
sprintf("Median number of steps per day is %s", medianStepDay)
meanStep5min <- with(actData, tapply(steps, interval, mean, na.rm=T))
plot(meanStep5min, type="l",xlab="5 minute interval index", ylab="average number of steps taken")
##find the interval with highest average number of step
maxMeanSteps <- max(meanStep5min)
maxInterval <- match(meanStep5min, maxMeanSteps)
for (i in 1:length(maxInterval)) {
if (!is.na(maxInterval[i])) max_i=i
}
interval_id <- names(meanStep5min[max_i])
print(paste("Interval", interval_id, "has the highest mean number of steps (",round(maxMeanSteps,2),")"))
numberNA <- sum(is.na(actData[,1]))
print(paste("There are", numberNA, "missing values, which is equal to",round(100*numberNA/length(actData[,1]),2),"% of all observations"))
## my strategy for imputing values is to use the mean for the particular 5 minute interval
numberOfDays <- as.integer(as.Date(as.character(actData[length(actData[,1]), 2]))-
as.Date(as.character(actData[1,2])) +1)
numberOfIntervals <- length(actData[,1])/numberOfDays
actDataImp <- actData
actDataImp <-cbind(actDataImp, dayInt=c(rep(1:numberOfIntervals, numberOfDays)))
for (i in 1:length(actDataImp[,1])){
if (is.na(actDataImp[i,1])) {
actDataImp[i,1] <- round(meanStep5min[actDataImp[i,4]])
}
}
totStepDayImp <- with(actDataImp, tapply(steps, date, sum, na.rm=T))
hist(totStepDay, breaks=20, xlab="Total steps per day", main="Total Steps per Day")
## calculate mean and median number of steps taken per day
meanStepDayImp <- mean(totStepDayImp)
medianStepDayImp <- median(totStepDayImp)
print(paste("Mean number of steps per day with NAs replaced is",round(meanStepDayImp)))
sprintf("Median number of steps per day with NAs replaced is %s", medianStepDayImp)
actDataImp$weekday <- with(actDataImp, as.factor(weekdays(as.Date(as.character(date)))))
wdss <- subset(actDataImp, weekday=="Monday" | weekday=="Tuesday" |weekday=="Wednesday" |weekday=="Thursday" | weekday=="Friday" )
wess <- subset(actDataImp, weekday=="Saturday" | weekday=="Sunday" )
meanStep5minWeekday <- with(wdss, tapply(steps, interval, mean, na.rm=T))
meanStep5minWeekend <- with(wess, tapply(steps, interval, mean, na.rm=T))
par(mfrow=c(2,1), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(meanStep5minWeekend, type="l", col="blue", xaxt="n", xlab="", ylab="average number of steps", main="weekend")
title(main="Average number of steps  split on weekend and weekdays", outer=TRUE)
plot(meanStep5minWeekday, type="l", col= "blue", xlab="5 minute interval index", ylab="average number of steps", main="weekdays")
library (ggplot2)
for (i in 1:length(actDataImp$weekday)){
if (actDataImp$weekday[i]=="Saturday" | actDataImp$weekday[i]=="Sunday") {
actDataImp$dayCat[i] <- "Weekend"
printf(i)
} else {
actDataImp$dayCat[i] <- "Weekday"
}
}
View(actDataImpT)
View(actDataImp)
actDataImp[1500,]
actDataImp[1600,]
actDataImp[1800,]
for (i in 1:length(actDataImp$weekday)){
if (actDataImp$weekday[i]=="Saturday" | actDataImp$weekday[i]=="Sunday") {
actDataImp$dayCat[i] <- "Weekend"
printf(i)
} else {
actDataImp$dayCat[i] <- "Weekday"
}
i=i+1
}
for (i in 1:length(actDataImp$weekday)){
if (actDataImp$weekday[i]=="Saturday" | actDataImp$weekday[i]=="Sunday") {
actDataImp$dayCat[i] <- "Weekend"
} else {
actDataImp$dayCat[i] <- "Weekday"
}
i=i+1
}
View(actDataImp)
actDataImp[1800,]
actDataImp[1700,]
actDataImp[1500,]
actDataImp[1900,]
actDataImp[2000,]
actDataImp[2200,]
?ggplot
?qplot
qplot(interval.tapply(steps, interval, mean, na.rm=T),data=actDataImp, facets=dayCat~., geom=c("line"))
meanStep5minWeekday[1]
str(meanStep5minWeekday[1])
newDF <- data.frame(mean.steps=meanStep5minWeekday, day.category="Weekday")
View(newDF)
newDF1 <- data.frame(mean.steps=meanStep5minWeekday, day.category="Weekday")
newDF2 <- data.frame(mean.steps=meanStep5minWeekend, day.category="Weekend")
newDF <- rbind(newDF1, newDF2)
View(newDF)
str(newDF)
View(newDF1)
newDF1 <- data.frame(interval=1:numberOfIntervals, mean.steps=meanStep5minWeekday, day.category="Weekday")
View(newDF1)
newDF2 <- data.frame(interval=1:numberOfIntervals, mean.steps=meanStep5minWeekend, day.category="Weekend")
newDF <- rbind(newDF1, newDF2)
View(newDF)
qplot(interval, mean.steps, data=newDF, geom=c("line"), facets=day.category)
qplot(interval, mean.steps, data=newDF, geom=c("line"), facets=day.category~.)
debugSource('~/GitHub/RepData_PeerAssessment1/misc.R')
